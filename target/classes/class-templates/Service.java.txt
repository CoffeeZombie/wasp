package {PACKAGE_NAME}.service;

import dev.coffeezombie.wasp_test.dto.{PC_DTO_NAME};
import dev.coffeezombie.wasp_test.entity.{PC_ENTITY_NAME};
import dev.coffeezombie.wasp_test.repository.{PC_REPOSITORY_NAME};
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class {PC_SERVICE_NAME} {

    private final {PC_REPOSITORY_NAME} {CC_REPOSITORY_NAME};

    public List<{PC_DTO_NAME}> findAll() {
        return {PC_REPOSITORY_NAME}.findAll()
                .stream()
                .map({PC_ENTITY_NAME}::toDto)
                .collect(Collectors.toList());
    }

    public {PC_DTO_NAME} findById(Long id) {
        var entity = {CC_REPOSITORY_NAME}.findById(id)
                .orElseThrow(() -> new RuntimeException("Unable to find {FRIENDLY_ENTITY_NAME} by id " + id));

        return entity.toDto();
    }

    public void deleteById(Long id) {
        {CC_REPOSITORY_NAME}.deleteById(id);
    }

    public {PC_DTO_NAME} createOrUpdate({PC_DTO_NAME} dto) {
        var entity = {CC_REPOSITORY_NAME}.save(dto.toEntity());
        return entity.toDto();
    }

    public {PC_DTO_NAME} update({PC_DTO_NAME} dto) {
        var entity = findById(dto.getId()); // Throws exception if not found - this is used as a check only
        var updated = {CC_REPOSITORY_NAME}.save(dto.toEntity());
        return updated.toDto();
    }
}