package dev.coffeezombie.wasp_test.service;

import dev.coffeezombie.wasp_test.dto.PersonThingDto;
import dev.coffeezombie.wasp_test.entity.PersonThing;
import dev.coffeezombie.wasp_test.repository.PersonThingRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class PersonThingService {

    private final PersonThingRepository personThingRepository;

    public List<PersonThingDto> findAll() {
        return personThingRepository.findAll()
                .stream()
                .map(PersonThing::toDto)
                .collect(Collectors.toList());
    }

    public PersonThingDto findById(Long id) {
        var entity = personThingRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Unable to find person-thing by id " + id));

        return entity.toDto();
    }

    public void deleteById(Long id) {
        personThingRepository.deleteById(id);
    }

    public PersonThingDto createOrUpdate(PersonThingDto dto) {
        var entity = personThingRepository.save(dto.toEntity());
        return entity.toDto();
    }

    public PersonThingDto update(PersonThingDto dto) {
        var entity = findById(dto.getId()); // Throws exception if not found - this is used as a check only
        var updated = personThingRepository.save(dto.toEntity());
        return updated.toDto();
    }
}